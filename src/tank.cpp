/***************************************************************************
 *   Copyright (C) 2005 by Jeff Ferr                                       *
 *   root@sat                                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330x00, Boston, MA  02111-1307, USA.          *
 ***************************************************************************/
#include "atari.h"

uint8_t numbers[10][8*16] = {
  { // 0
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  },
  { // 1
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00
  },
  { // 2
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  },
  { // 3
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  },
  { // 4
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00
  },
  { // 5
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  },
  { // 6
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  },
  { // 7
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00
  },
  { // 8
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  },
  { // 9
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
    0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00
  }
};

#define ROWS 18
#define COLS 30

#define BLOCK_ROW_SIZE 8
#define BLOCK_COL_SIZE 5

uint8_t map[ROWS][COLS] = {
  0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0b,
  0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
};

struct sprite_t {
  jgui::jsize_t<int> size;
  uint8_t data[];
} tank = {
    .size = {
      7, 9
    },
    .data = {
      0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x02,
      0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x02,
      0x02, 0x0f, 0x0f, 0x0f, 0x02, 0x02, 0x02,
      0x02, 0x0f, 0x0f, 0x0f, 0x0f, 0x02, 0x02,
      0x02, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
      0x02, 0x0f, 0x0f, 0x0f, 0x0f, 0x02, 0x02,
      0x02, 0x0f, 0x0f, 0x0f, 0x02, 0x02, 0x02,
      0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x02,
      0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x02
    },
  };

struct player_t {
  jgui::jpoint_t<float> pos;
  int angle;
  int score;
  int health;
};

struct fire_t {
  jgui::jpoint_t<float> pos;
  jgui::jpoint_t<float> dir;
  bool alive;
};

constexpr static float ANGLE_MULTIPLY ((2.0f*M_PI)/32.0f);

class Tank : public Atari {

  private:
    std::vector<fire_t> 
      _fires;
    player_t 
      _player0 {
        .pos = {
          16, 71
        },
        .angle = 0,
        .score = 0,
        .health = 100
      },
      _player1 {
        .pos = {
          128, 71
        },
        .angle = 16,
        .score = 0,
        .health = 100
      };
    jgui::jinsets_t<int>
      _offset {
        .left = 5, 
        .top = 32,
        .right = 5,
        .bottom = 12
      };
    int
      _delay;

  public:
    Tank():
      Atari()
    {
    }

    virtual ~Tank()
    {
    }

    virtual void loop(int64_t timestamp)
    {
      jgui::jsize_t<int>
        canvas {SW - 2*_offset.left, SH - _offset.top - _offset.bottom};

      for (auto &fire : _fires) {
        fire.pos = fire.pos + fire.dir;
         
        int 
          px = fire.pos.x/BLOCK_COL_SIZE,
          py = fire.pos.y/BLOCK_ROW_SIZE;

        if (map[py][px] != 0x02) {
          fire.alive = false;
        }

        if (_player1.health > 0 and collide({fire.pos, 1, 1}, {_player1.pos - jgui::jpoint_t<int>{4, 4}, 8, 8}) == true) {
          _player0.score = _player0.score + 1;
          _player1.health = _player1.health - 10;

          fire.alive = false;
        }
      }

      // input events
      if (key(KEY_UP) or key(KEY_DOWN)) {
        jgui::jpoint_t<float>
          step {
            cosf(_player0.angle*ANGLE_MULTIPLY), -sinf(_player0.angle*ANGLE_MULTIPLY)
          },
          pos = _player0.pos;

        if (key(KEY_UP)) {
          pos = pos + step;
        } else {
          pos = pos - step;
        }

        int 
          px = pos.x/BLOCK_COL_SIZE,
          py = pos.y/BLOCK_ROW_SIZE;
        bool
          flag = false;

        for (int j=-1; j<2; j++) {
          for (int i=-1; i<2; i++) {
            int
              bx = (px + i)*BLOCK_COL_SIZE,
              by = (py + j)*BLOCK_ROW_SIZE;

            if (map[py + j][px + i] != 0x02 and collide({int(pos.x), int(pos.y), BLOCK_COL_SIZE, BLOCK_ROW_SIZE}, {bx, by, BLOCK_COL_SIZE, BLOCK_ROW_SIZE}) == true) {
              flag = true;

              break;
            }
          }
        }

        if (flag == false) {
          // INFO:: tanks collision
          if ((_player0.pos - _player1.pos).EuclidianNorm() > 9) {
            _player0.pos = pos;
          }
        }
      }

      if (++_delay%2 != 0) {
        if (key(KEY_LEFT)) {
          _player0.angle = _player0.angle + 1;
        } else if (key(KEY_RIGHT)) {
          _player0.angle = _player0.angle - 1;
        }

        // fire
        if (key(KEY_ACTION) and _fires.size() == 0) {
          fire_t t {
            .pos = _player0.pos,
            .dir = {
              2.0f*cosf(_player0.angle*ANGLE_MULTIPLY), -2.0f*sinf(_player0.angle*ANGLE_MULTIPLY)
            },
            .alive = true
          };

          t.pos = t.pos + 4.0f*t.dir;

          _fires.push_back(t);
        }
      }

      _fires.erase(std::remove_if(_fires.begin(), _fires.end(), 
            [](fire_t &fire) {
              return fire.alive == false;
            }), _fires.end());
		}

		virtual void draw(context &ctx)
		{
			// INFO:: draw background
			ctx.color(0x02);
			ctx.fill(true);
			ctx.rect({0, 0, SW, SH});
		  
      // INFO:: draw players
			if (_player0.health > 0) {
      	ctx.sprite(tank.data, {_player0.pos + jgui::jpoint_t<int>{_offset.left - tank.size.width/2, _offset.top - tank.size.height/2}, tank.size}, _player0.angle*ANGLE_MULTIPLY);
			}

			if (_player1.health > 0) {
      	ctx.sprite(tank.data, {_player1.pos + jgui::jpoint_t<int>{_offset.left - tank.size.width/2, _offset.top - tank.size.height/2}, tank.size}, _player1.angle*ANGLE_MULTIPLY);
			}

      // INFO:: draw map
      for (int j=0; j<ROWS; j++) {
        for (int i=0; i<COLS; i++) {
          int color = map[j][i];

          if (color != 0x02) {
			      ctx.color(map[j][i]);
			      ctx.rect({i*BLOCK_COL_SIZE + _offset.left, j*BLOCK_ROW_SIZE + _offset.top, BLOCK_COL_SIZE, BLOCK_ROW_SIZE});
          }
        }
      }
      
      // INFO:: draw fire
			ctx.color(0x0f);

      for (auto &t : _fires) {
        ctx.pixel({int(t.pos.x + _offset.left), int(t.pos.y + _offset.top)});
      }
			
      // INFO:: draw score
			ctx.color(0x02);
			ctx.fill(true);
			ctx.rect({0, 12, SW, 8});
      
			int x = (SW - 16 - 1)/2;

			ctx.sprite(numbers[_player0.score/10], {5 + 0*(8 + 1), 8, 8, 16});
			ctx.sprite(numbers[_player0.score%10], {5 + 1*(8 + 1), 8, 8, 16});
			
      ctx.sprite(numbers[_player1.score/10], {138 + 0*(8 + 1), 8, 8, 16});
			ctx.sprite(numbers[_player1.score%10], {138 + 1*(8 + 1), 8, 8, 16});
			
      ctx.color(0x04);
      ctx.rect({5 + 2*(8 + 1), 12, (50*_player0.health)/100, 8});
      ctx.rect({68 + 2*(8 + 1) + (50*(100 - _player1.health))/100, 12, (50*_player1.health)/100, 8});
    }

};


int main(int argc, char **argv)
{
	jgui::Application::Init(argc, argv);

	Tank app;

	jgui::Application::Loop();

	return 0;
}
